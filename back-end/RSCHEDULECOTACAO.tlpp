#include 'fw-tlpp-core.th'
#include 'totvs.ch'
User Function RSCHEDULECOTACAO()
    Local cQuery as character
    Local cAlias as character
    Local cChave as character
    Local cIndex as character
    Local cCorpo as character

    RpcSetEnv("99")
    cQuery := "SELECT DISTINCT C8_FILIAL,C8_NUM FROM "+RetSqlName("SC8")+" SC8 " 
    cQuery += "WHERE SC8.D_E_L_E_T_=' ' " 
    cQuery += "AND C8_YSEND = ' ' "  

    cAlias := MPSysOpenQuery(cQuery)

    DbSelectArea("SC8")
    SC8->(DbSetOrder(1))
    SC8->(DbGoTop())
    (cAlias)->(dbGoTop())
    While (cAlias)->(!EOF())
        cIndex := (cAlias)->C8_FILIAL + (cAlias)->C8_NUM

        SC8->(DbSeek(cIndex))

        cChave := MD5(SC8->(C8_FILIAL+C8_NUM+C8_FORNECE+C8_LOJA))

        While SC8->(!EOF()) .AND. SC8->(C8_FILIAL+C8_NUM) == cIndex
            RecLock("SC8", .F.)
                SC8->C8_YHASH := cChave
            SC8->(MsUnlock())

            SC8->(DbSkip())
        ENDDO
        (cAlias)->(DbSkip())

        cCorpo := ''
        cCorpo += ' <html>' + CRLF
        cCorpo += ' <head>' + CRLF
        cCorpo += '     <title>' + cTitulo + '</title>' + CRLF
        cCorpo += ' </head>' + CRLF
        cCorpo += ' <body>' + CRLF
        cCorpo += ' Teste cotação: ' +cHash+ CRLF
        cCorpo += ' </body>' + CRLF
        cCorpo += ' </html>' + CRLF

        IF EnvioEmail("yago.teles123@gmail.com", "Nova cotação", cCorpo, {}, .F., .T.)
            RecLock("SC8", .F.)
                SC8->C8_YSEND = 'S'
            SC8->(MsUnlock())
        ELSE 
            RecLock("SC8", .F.)
                SC8->C8_YSEND = 'E'
            SC8->(MsUnlock())
        ENDIF
    ENDDO
    (cAlias)->(DbCloseArea())
Return

Static Function EnvioEmail(cPara, cAssunto, cCorpo, aAnexos, lMostraLog, lUsaTLS)
    Local aArea        := GetArea()
    Local nAtual       := 0
    Local lRet         := .T.
    Local oMsg         := Nil
    Local oSrv         := Nil
    Local nRet         := 0
    Local cFrom        := Alltrim(GetMV("MV_RELACNT"))
    Local cUser        := SubStr(cFrom, 1, At('@', cFrom)-1)
    Local cPass        := Alltrim(GetMV("MV_RELPSW"))
    Local cSrvFull     := Alltrim(GetMV("MV_RELSERV"))
    Local cServer      := Iif(':' $ cSrvFull, SubStr(cSrvFull, 1, At(':', cSrvFull)-1), cSrvFull)
    Local nPort        := Iif(':' $ cSrvFull, Val(SubStr(cSrvFull, At(':', cSrvFull)+1, Len(cSrvFull))), 587)
    Local nTimeOut     := GetMV("MV_RELTIME")
    Local cLog         := ""
    Default cPara      := ""
    Default cAssunto   := ""
    Default cCorpo     := ""
    Default aAnexos    := {}
    Default lMostraLog := .F.
    Default lUsaTLS    := .F.
  
    //Se tiver em branco o destinatário, o assunto ou o corpo do email
    If Empty(cPara) .Or. Empty(cAssunto) .Or. Empty(cCorpo)
        cLog += "001 - Destinatario, Assunto ou Corpo do e-Mail vazio(s)!" + CRLF
        lRet := .F.
    EndIf
  
    If lRet
        //Cria a nova mensagem
        oMsg := TMailMessage():New()
        oMsg:Clear()
  
        //Define os atributos da mensagem
        oMsg:cFrom    := cFrom
        oMsg:cTo      := cPara
        oMsg:cSubject := cAssunto
        oMsg:cBody    := cCorpo
  
        //Percorre os anexos
        For nAtual := 1 To Len(aAnexos)
            //Se o arquivo existir
            If File(aAnexos[nAtual])
  
                //Anexa o arquivo na mensagem de e-Mail
                nRet := oMsg:AttachFile(aAnexos[nAtual])
                If nRet < 0
                    cLog += "002 - Nao foi possivel anexar o arquivo '"+aAnexos[nAtual]+"'!" + CRLF
                EndIf
  
            //Senao, acrescenta no log
            Else
                cLog += "003 - Arquivo '"+aAnexos[nAtual]+"' nao encontrado!" + CRLF
            EndIf
        Next
  
        //Cria servidor para disparo do e-Mail
        oSrv := tMailManager():New()
  
        //Define se irá utilizar o TLS
        If lUsaTLS
            oSrv:SetUseTLS(.T.)
        EndIf
  
        //Inicializa conexão
        nRet := oSrv:Init("", cServer, cUser, cPass, 0, nPort)
        If nRet != 0
            cLog += "004 - Nao foi possivel inicializar o servidor SMTP: " + oSrv:GetErrorString(nRet) + CRLF
            lRet := .F.
        EndIf
  
        If lRet
            //Define o time out
            nRet := oSrv:SetSMTPTimeout(nTimeOut)
            If nRet != 0
                cLog += "005 - Nao foi possivel definir o TimeOut '"+cValToChar(nTimeOut)+"'" + CRLF
            EndIf
  
            //Conecta no servidor
            nRet := oSrv:SMTPConnect()
            If nRet <> 0
                cLog += "006 - Nao foi possivel conectar no servidor SMTP: " + oSrv:GetErrorString(nRet) + CRLF
                lRet := .F.
            EndIf
  
            If lRet
                //Realiza a autenticação do usuário e senha
                nRet := oSrv:SmtpAuth(cFrom, cPass)
                If nRet <> 0
                    cLog += "007 - Nao foi possivel autenticar no servidor SMTP: " + oSrv:GetErrorString(nRet) + CRLF
                    lRet := .F.
                EndIf
  
                If lRet
                    //Envia a mensagem
                    nRet := oMsg:Send(oSrv)
                    If nRet <> 0
                        cLog += "008 - Nao foi possivel enviar a mensagem: " + oSrv:GetErrorString(nRet) + CRLF
                        lRet := .F.
                    EndIf
                EndIf
  
                //Disconecta do servidor
                nRet := oSrv:SMTPDisconnect()
                If nRet <> 0
                    cLog += "009 - Nao foi possivel disconectar do servidor SMTP: " + oSrv:GetErrorString(nRet) + CRLF
                EndIf
            EndIf
        EndIf
    EndIf
  
    //Se tiver log de avisos/erros
    If !Empty(cLog)
        cLog := "zEnvMail - "+dToC(Date())+ " " + Time() + CRLF + ;
            "Funcao - " + FunName() + CRLF + CRLF +;
            "Existem mensagens de aviso: "+ CRLF +;
            cLog
        ConOut(cLog)
  
        //Se for para mostrar o log visualmente e for processo com interface com o usuário, mostra uma mensagem na tela
        If lMostraLog .And. ! IsBlind()
            Aviso("Log", cLog, {"Ok"}, 2)
        EndIf
    EndIf
  
    RestArea(aArea)
Return lRet

Static Function MontaCorpoEmail(cHash)
    Local cCorpo 
    cCorpo := ''
    cCorpo += ' <html>' + CRLF
    cCorpo += ' <head>' + CRLF
    cCorpo += '     <title>' + cTitulo + '</title>' + CRLF
    cCorpo += ' </head>' + CRLF
    cCorpo += ' <body>' + CRLF
    cCorpo += ' Teste cotação: ' +cHash+ CRLF
    cCorpo += ' </body>' + CRLF
    cCorpo += ' </html>' + CRLF
Return cCorpo
